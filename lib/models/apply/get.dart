// class Autogenerated {
//   bool success;
//   int total;
//   List<Data> data;

//   Autogenerated({this.success, this.total, this.data});

//   Autogenerated.fromJson(Map<String, dynamic> json) {
//     success = json['success'];
//     total = json['total'];
//     if (json['data'] != null) {
//       data = new List<Data>();
//       json['data'].forEach((v) {
//         data.add(new Data.fromJson(v));
//       });
//     }
//   }

//   Map<String, dynamic> toJson() {
//     final Map<String, dynamic> data = new Map<String, dynamic>();
//     data['success'] = this.success;
//     data['total'] = this.total;
//     if (this.data != null) {
//       data['data'] = this.data.map((v) => v.toJson()).toList();
//     }
//     return data;
//   }
// }

// ignore_for_file: unnecessary_null_comparison

import '../../constant.dart';

class Apply {
  late String sId;
  late Post post;
  late Poster poster;
  Resume? resume;
  late int negotiatePrice;
  late String state;
  late Poster creator;
  late String deleteState;
  late List<Timeline> timeline;
  late String createdAt;
  late String updatedAt;
  late int iV;
  String? letter;
  String? reasonDeclined;
  ConsultingJob? consultingJob;

  Apply(
      {required this.sId,
      required this.post,
      required this.poster,
      this.resume,
      required this.negotiatePrice,
      required this.state,
      required this.creator,
      required this.deleteState,
      required this.timeline,
      required this.createdAt,
      required this.updatedAt,
      required this.iV,
      this.reasonDeclined,
      this.letter,
      this.consultingJob});

  Apply.fromJson(Map<String, dynamic> json) {
    try {
      sId = json['_id'];
      post = Post.fromJson(json['post']);
      poster = Poster.fromJson(json['poster']);
      resume = json['resume'] != null ? Resume.fromJson(json['resume']) : null;
      negotiatePrice = json['negotiatePrice'];
      state = json['state'];
      creator = Poster.fromJson(json['creator']);
      deleteState = json['deleteState'];
      if (json['timeline'] != null) {
        timeline = <Timeline>[];
        List<dynamic> list = json['timeline'];
        list.forEach((v) {
          timeline.add(Timeline.fromJson(v));
        });
      } else {
        timeline = [];
      }
      createdAt = json['createdAt'];
      updatedAt = json['updatedAt'];
      iV = json['__v'];
      letter = (json['letter'] != null) ? json['letter'] : null;
      reasonDeclined =
          (json['reasonDeclined'] != null) ? json['reasonDeclined'] : null;

      consultingJob = json['consultingJob'] != null
          ? new ConsultingJob.fromJson(json['consultingJob'])
          : null;
    } catch (e) {
      print(e);
      print(json.toString());
      print(this.toJson());
      print('error Apply fromJson');
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['_id'] = this.sId;
    if (this.post != null) {
      data['post'] = this.post.toJson();
    }
    if (this.poster != null) {
      data['poster'] = this.poster.toJson();
    }
    if (this.resume != null) {
      data['resume'] = this.resume?.toJson();
    }
    data['negotiatePrice'] = this.negotiatePrice;
    data['state'] = this.state;

    if (this.creator != null) {
      data['creator'] = this.creator.toJson();
    }
    data['deleteState'] = this.deleteState;
    if (this.timeline != null) {
      data['timeline'] = this.timeline.map((v) => v.toJson()).toList();
    }
    data['createdAt'] = this.createdAt;
    data['updatedAt'] = this.updatedAt;
    data['__v'] = this.iV;
    data['letter'] = this.letter;
    if (this.consultingJob != null) {
      data['consultingJob'] = this.consultingJob?.toJson();
    }
    return data;
  }
}

class Post {
  late String sId;
  late String author;
  late String title;
  late String postingTime;
  late int price;
  late String adviseType;

  Post(
      {required this.sId,
      required this.author,
      required this.title,
      required this.postingTime,
      required this.price,
      required this.adviseType});

  Post.fromJson(Map<String, dynamic> json) {
    try {
      sId = json['_id'];
      author = json['author'];
      title = json['title'];
      postingTime = json['postingTime'];
      price = json['price'];
      adviseType = json['adviseType'];
    } catch (e) {
      print(e);
      print('post from json');
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['_id'] = this.sId;
    data['author'] = this.author;
    data['title'] = this.title;
    data['postingTime'] = this.postingTime;
    data['price'] = this.price;
    data['adviseType'] = this.adviseType;
    return data;
  }
}

class Poster {
  late String sId;
  late String name;
  late String avatarUrl;

  Poster({
    required this.sId,
    required this.name,
    required this.avatarUrl,
  });

  Poster.fromJson(Map<String, dynamic> json) {
    sId = json['_id'];
    name = json['name'];
    avatarUrl = json['avatarUrl'] == null ? defaultAvatar : json['avatarUrl'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['_id'] = this.sId;
    data['name'] = this.name;
    data['avatarUrl'] = this.avatarUrl;

    return data;
  }
}

class Resume {
  late String sId;
  late List<Content> content;
  late String title;
  late int iV;

  Resume(
      {required this.sId,
      required this.content,
      required this.title,
      required this.iV});

  Resume.fromJson(Map<String, dynamic> json) {
    sId = json['_id'];
    if (json['content'] != null) {
      content = <Content>[];
      List<dynamic> list = json['content'];
      list.forEach((v) {
        content.add(Content.fromJson(v));
      });
    }
    title = json['title'];
    iV = json['__v'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['_id'] = this.sId;
    if (this.content != null) {
      data['content'] = this.content.map((v) => v.toJson()).toList();
    }
    data['title'] = this.title;
    data['__v'] = this.iV;
    return data;
  }
}

class Content {
  late String insert;
  Attributes? attributes;

  Content({required this.insert, required this.attributes});

  Content.fromJson(Map<String, dynamic> json) {
    insert = json['insert'];
    attributes = json['attributes'] != null
        ? new Attributes.fromJson(json['attributes'])
        : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['insert'] = this.insert;
    if (this.attributes != null) {
      data['attributes'] = this.attributes?.toJson();
    }
    return data;
  }
}

class Attributes {
  bool? bold;
  bool? italic;

  Attributes({this.bold, this.italic});

  Attributes.fromJson(Map<String, dynamic> json) {
    bold = json['bold'] != null ? json['bold'] : null;
    italic = json['italic'] != null ? json['italic'] : null;
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    if (this.bold != null) {
      data['bold'] = this.bold;
    }
    if (this.italic != null) {
      data['italic'] = this.italic;
    }
    return data;
  }
}

class Timeline {
  late String status;
  late String time;

  Timeline({required this.status, required this.time});

  Timeline.fromJson(Map<String, dynamic> json) {
    status = json['status'];
    time = json['time'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['status'] = this.status;
    data['time'] = this.time;
    return data;
  }
}

class ConsultingJob {
  late String sId;
  late String apply;
  late bool isStarted;
  late bool isFinished;
  late bool isPaid;
  late Freelancer freelancer;
  late Freelancer poster;
  late String deleteState;
  late List<Timeline> timeline;
  late String createdAt;
  late String updatedAt;
  late int iV;
  String? time_suggest_start_job;
  String? review;
  String? report;

  ConsultingJob(
      {required this.sId,
      required this.apply,
      required this.isStarted,
      required this.isFinished,
      required this.isPaid,
      required this.freelancer,
      required this.poster,
      required this.deleteState,
      required this.timeline,
      required this.createdAt,
      required this.updatedAt,
      required this.iV,
      this.time_suggest_start_job,
      this.review,
      this.report});

  ConsultingJob.fromJson(Map<String, dynamic> json) {
    sId = json['_id'];
    apply = json['apply'];
    isStarted = json['isStarted'];
    isFinished = json['isFinished'];
    isPaid = json['isPaid'];
    freelancer = Freelancer.fromJson(json['freelancer']);
    poster = Freelancer.fromJson(json['poster']);
    deleteState = json['deleteState'];
    if (json['timeline'] != null) {
      timeline = <Timeline>[];
      List<dynamic> list = json['timeline'];
      list.forEach((v) {
        timeline.add(Timeline.fromJson(v));
      });
    }
    if (json['time_suggest_start_job'] != null) {
      time_suggest_start_job = json['time_suggest_start_job'];
    }
    if (json['review'] != null) {
      review = json['review'];
    }
    if (json['report'] != null) {
      report = json['report'];
    }
    createdAt = json['createdAt'];
    updatedAt = json['updatedAt'];
    iV = json['__v'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['_id'] = this.sId;
    data['apply'] = this.apply;
    data['isStarted'] = this.isStarted;
    data['isFinished'] = this.isFinished;
    data['isPaid'] = this.isPaid;
    if (this.freelancer != null) {
      data['freelancer'] = this.freelancer.toJson();
    }
    if (this.poster != null) {
      data['poster'] = this.poster.toJson();
    }
    data['deleteState'] = this.deleteState;
    if (this.timeline != null) {
      data['timeline'] = this.timeline.map((v) => v.toJson()).toList();
    }
    data['createdAt'] = this.createdAt;
    data['updatedAt'] = this.updatedAt;
    data['__v'] = this.iV;
    if (this.time_suggest_start_job != null) {
      data['time_suggest_start_job'] = this.time_suggest_start_job;
    }
    if (this.review != null) {
      data['review'] = this.review;
    }
    if (this.report != null) {
      data['report'] = this.report;
    }
    return data;
  }
}

class Freelancer {
  late String closeState;
  late String startState;
  late String payState;

  Freelancer(
      {required this.closeState,
      required this.startState,
      required this.payState});

  Freelancer.fromJson(Map<String, dynamic> json) {
    closeState = json['closeState'];
    startState = json['startState'];
    payState = json['payState'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['closeState'] = this.closeState;
    data['startState'] = this.startState;
    data['payState'] = this.payState;
    return data;
  }
}
